// 
// Michael Li(http://www.github.com/micli). All rights reserved.
// Licensed under the MIT license.
// 
// Microsoft Cognitive Services: https://www.microsoft.com/cognitive-services
// 
// 
// 
// MIT License:
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// 

package com.github.micli.cognitiveservice.api.vision;

import java.net.URI;
import java.util.ArrayList;
import java.util.Calendar;


import com.github.micli.cognitiveservice.api.result.ObjectResult;

public class ChinaMainlandIdentityCard {
	private Vision vision = null;
	public ChinaMainlandIdentityCard(URI endPoint, String accessKey) {
		// TODO Auto-generated constructor stub
		vision = new Vision(endPoint, accessKey);
	}

    public ChinaMainlandIdentityCardInfo RetrieveFromLocalFile(String filePath){
    	if(null == filePath || "" == filePath)
    		return null;
		ObjectResult<OCRValue> result = vision.OCRFromLocalFile(filePath);
		if(!result.isSucceeded())
			return null;
		OCRValue ocrValue = result.getInstance();
		System.out.println(ocrValue.toString());
		ArrayList<OCRTextElement> elements = BuildOCRTextElementArray(ocrValue);
		ArrayList<String> lines = MakeOCRTextElementInLines(elements);
		ChinaMainlandIdentityCardInfo info = RetrieveResidentInfo(lines);
		
		return info;
    }
    // 直接拿word
    private ArrayList<OCRTextElement> BuildOCRTextElementArray(OCRValue ocrValue) {
    	ArrayList<OCRTextElement> elements = new ArrayList<OCRTextElement>();
    	if(null == ocrValue) 
    		return elements;
    	for(OCRRegionElement region : ocrValue.getRegions()) {
    		for(OCRLineElement line : region.getLines()) {
    			for(OCRTextElement word : line.getWords())
    				elements.add(word);
    		}
    	}
    		
    	return elements;
    }
    private ArrayList<String> MakeOCRTextElementInLines(ArrayList<OCRTextElement> elements) {
    	ArrayList<String> lines = new ArrayList<String>();
    	if(null == elements)
    		return lines;
    	
    	StringBuffer line = new StringBuffer();
    	int middleHeight = 0;
    	int length = elements.toArray().length;
    	OCRTextElement lineFirst = null;
    	OCRTextElement temp = null;
    	ArrayList<OCRTextElement> tempList = new ArrayList<OCRTextElement>();
    	while(length > 0) {
    		lineFirst = elements.get(0);
    		tempList.add(lineFirst);
    		line.append(lineFirst.getText());
    		middleHeight = lineFirst.getRectangle().getTop() + 
    				lineFirst.getRectangle().getHeight() / 2;
        	for(int i = 1; i < length; i++) {
        		temp = elements.get(i);
        		if(temp.getRectangle().getTop() < middleHeight && 
        				temp.getRectangle().getTop() + temp.getRectangle().getHeight() > middleHeight) {
        			line.append(temp.getText());
        			tempList.add(temp);
        		}
        	}
        	lines.add(line.toString());
        	System.out.println(line);
        	line.delete(0, line.length());
        	elements.removeAll(tempList);
        	tempList.clear();
    		length = elements.toArray().length;
    	}
    	
    	return lines;
    }
    private String findLine(String key, ArrayList<String> lines){
    	for(String s : lines) {
    		if(s.contains(key))
    			return s;
    	}
    	return null;
    }
    private Calendar parseBirthday(String birthString) {
    	if(null == birthString)
    		return null;
    	String year = birthString.substring(0, birthString.indexOf("年"));
    	String month = birthString.substring(birthString.indexOf("年") + 1, birthString.indexOf("月"));
    	String day = birthString.substring(birthString.indexOf("月") + 1, birthString.indexOf("日"));
    	Calendar birthday = Calendar.getInstance();
    	birthday.set(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));
    	return birthday;
    }
    private ChinaMainlandIdentityCardInfo RetrieveResidentInfo(ArrayList<String> lines) {
    	String tempLine = "";
    	ChinaMainlandIdentityCardInfo info = new ChinaMainlandIdentityCardInfo();
    	// Step 1. retrieve "公民身份号码"
    	tempLine = findLine("公民身份号码", lines);
    	if(null != tempLine) {
    		info.setIdentityNumber(tempLine.replaceAll("公民身份号码", ""));
    		lines.remove(tempLine);
    	}
    	// Step 2. retrieve "姓名"
    	tempLine = findLine("姓名", lines);
    	if(null != tempLine) {
    		info.setLegalName(tempLine.replaceAll("姓名", ""));
    		lines.remove(tempLine);
    	}
    	// Step 3. retrieve "性别" and "民族"
    	tempLine = findLine("性别", lines);
    	if(null != tempLine) {
    		info.setGender(tempLine.substring(tempLine.indexOf("性别") + 2, tempLine.indexOf("性别") + 3));
    		info.setEthnicGroup(tempLine.substring(tempLine.indexOf("族") + 1));
    		lines.remove(tempLine);
    	}
    	// Step 3. retrieve "出生"
    	tempLine = findLine("出生", lines);
    	if(null != tempLine) {
    		String birthString = tempLine.replaceAll("出生", "");
    		Calendar birthday = parseBirthday(birthString);
    		info.setBirthday(birthday);
    		lines.remove(tempLine);
    	}
    	// Step 4. retrieve "住址"
    	StringBuffer sb = new StringBuffer();
    	// Combine multiple lines of home address
    	for(String s : lines)
    		sb.append(s);
    	tempLine = sb.toString();
    	if(0 == tempLine.indexOf("住址"))
    		info.setHomeAddress(tempLine.substring(2));
    	else if(0 == tempLine.indexOf("住"))
    		info.setHomeAddress(tempLine.substring(1));
    	else if(0 == tempLine.indexOf("址"))
    		info.setHomeAddress(tempLine.substring(1));
    	else
    		info.setHomeAddress(tempLine);
    	
    	return info;
    }
}
